pipeline {
    agent { label 'jenkins-agent' }
    tools {
        jdk 'Java17'
        maven 'Maven3'
    }

    environment {
        ACR_NAME = "myimagesregistry.azurecr.io"
        IMAGE_NAME = "my-app"
        IMAGE_TAG = "latest"
    }

    stages {
        stage("Cleanup workspace"){
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM"){
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/GalacticMeteor/java-app.git'
            }
        }

        stage ("Build application"){
            steps {
                dir('app') {
                    sh "mvn clean package"
                }   
            }
        }

        stage ("Test application"){
            steps {
                dir('app') {
                    sh "mvn test"
                } 
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SCANNER_HOME = tool 'sonarqube-scanner'
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    dir('app') {
                        sh 'mvn clean verify sonar:sonar'
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        def dockerImage = docker.build("${ACR_NAME}/${IMAGE_NAME}:${IMAGE_TAG}")
                    }
                }
            }
        }

        stage('Push Docker image to ACR') {
            steps {
                script {
                    docker.withRegistry("https://${ACR_NAME}", "ACR") {
                        dockerImage.push()
                    }
                }
            }
        }
    }
}