pipeline {
    agent { label 'jenkins-agent' }
    tools {
        jdk 'Java17'
        maven 'Maven3'
    }

    environment {
        APP_NAME = "devops-app"
        RELEASE = "1.0.0"
        DOCKER_USER = "galacticmeteor"
        DOCKER_PASS = "dockerhub"
        IMAGE_NAME = "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN= credentials("JENKINS_API_TOKEN")
    }

    stages {
        stage("Cleanup workspace"){
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM"){
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/GalacticMeteor/java-app.git'
            }
        }

        stage ("Build application"){
            steps {
                dir('app') {
                    sh "mvn clean package"
                }   
            }
        }

        stage ("Test application"){
            steps {
                dir('app') {
                    sh "mvn test"
                } 
            }
        }

        stage("File System Scan") {
            steps {
                script {
                    sh "mkdir -p reports"
                    sh "trivy fs --format table -o reports/trivy-fs-report.html ."
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SCANNER_HOME = tool 'sonarqube-scanner'
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    dir('app') {
                        sh 'mvn clean verify sonar:sonar'
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        docker.withRegistry('', DOCKER_PASS) {
                            docker_image = docker.build("${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}")
                        }
                    }
                }
            }
        }

        stage("Scan Docker Image") {
            steps {
                script {
                    sh "mkdir -p reports"
                    sh "trivy image --format table -o reports/trivy-image-report.html ${IMAGE_NAME}"
                }
            }
        }

        stage('Push Docker image to dockerhub') {
            steps {
                dir('app') {
                        script {
                            def dockerImage = docker.image("${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}")
                            docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                                dockerImage.push()
                                dockerImage.push('latest')
                            }
                    }
                }
            }
        }

        stage ('Cleanup Artifacts') {
            steps {
                dir('app') {
                    script {
                        sh "docker rmi ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                        sh "docker rmi ${DOCKER_USER}/${IMAGE_NAME}:latest"
                    }
                }
            }
        }
        
        stage ('Trigger CD pipeline') {
            steps {
                script {
                    build job: 'argo-cd', 
                        parameters: [string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}")],
                        wait: false
                }
            }
        }
    }
}