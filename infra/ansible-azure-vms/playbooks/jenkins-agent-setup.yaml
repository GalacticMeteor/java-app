---
- name: Install DevOps Tools (Jenkins, SonarQube, PostgreSQL, Maven, Trivy, Docker)
  hosts: jenkins_agent_server
  become: yes
  vars:
    sonar_db_password: "SonarQube2024!"
    maven_version: "3.9.5"
    sonar_version: "10.3.0.82913"
    target_user: "root"
    
  tasks:
    # System Updates and Prerequisites
    - name: Update and upgrade system packages
      apt:
        update_cache: yes
        upgrade: yes
        cache_valid_time: 3600
        
    - name: Install system prerequisites
      apt:
        name:
          - wget
          - curl
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - unzip
          - git
          - lsb-release
        state: present
        
    # Docker Installation
    - name: Remove old Docker packages
      apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
        
    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.key
        mode: '0644'
        
    - name: Convert and install Docker GPG key
      shell: gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg /tmp/docker.key
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg
        
    - name: Get Ubuntu codename for Docker repo
      command: lsb_release -cs
      register: ubuntu_codename_docker
      changed_when: false
      
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ubuntu_codename_docker.stdout }} stable"
        state: present
        filename: docker
        
    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes
        
    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
        
    - name: Create docker group (if not exists)
      group:
        name: docker
        state: present
        
    # Java Installation
    - name: Install OpenJDK 17
      apt:
        name: openjdk-17-jdk
        state: present
        
    - name: Get Java path
      shell: readlink -f $(which java) | sed "s:bin/java::"
      register: java_path_result
      changed_when: false
      
    - name: Set JAVA_HOME in /etc/environment
      lineinfile:
        path: /etc/environment
        line: "JAVA_HOME={{ java_path_result.stdout }}"
        create: yes
        
    - name: Set JAVA_HOME in Jenkins environment
      lineinfile:
        path: /etc/default/jenkins
        line: "JAVA_HOME={{ java_path_result.stdout }}"
        create: yes
        
    - name: Export JAVA_HOME for current session
      set_fact:
        java_home: "{{ java_path_result.stdout }}"
        
    # PostgreSQL Installation and Configuration
    - name: Install PostgreSQL
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: present
        
    - name: Start and enable PostgreSQL
      systemd:
        name: postgresql
        state: started
        enabled: yes
        
    - name: Create SonarQube database user and database
      shell: |
        sudo -u postgres psql -c "CREATE USER sonar WITH ENCRYPTED PASSWORD '{{ sonar_db_password }}';" || true
        sudo -u postgres psql -c "CREATE DATABASE sonarqube OWNER sonar;" || true
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sonarqube TO sonar;" || true
      register: db_setup_result
      changed_when: "'already exists' not in db_setup_result.stderr"
      
    # Jenkins Installation
    - name: Download Jenkins GPG key
      get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        dest: /tmp/jenkins.key
        mode: '0644'
        
    - name: Convert and install Jenkins GPG key
      shell: gpg --dearmor -o /usr/share/keyrings/jenkins-keyring.gpg /tmp/jenkins.key
      args:
        creates: /usr/share/keyrings/jenkins-keyring.gpg
        
    - name: Add Jenkins repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.gpg] https://pkg.jenkins.io/debian-stable binary/"
        state: present
        filename: jenkins
        
    - name: Update apt cache after adding Jenkins repo
      apt:
        update_cache: yes
        
    - name: Install Jenkins
      apt:
        name: jenkins
        state: present
        
    - name: Stop Jenkins service if running (to reconfigure)
      systemd:
        name: jenkins
        state: stopped
      failed_when: false
      
    - name: Check Jenkins service status before starting
      command: systemctl status jenkins.service
      register: jenkins_status
      failed_when: false
      changed_when: false
      
    - name: Debug Jenkins installation
      debug:
        var: jenkins_status.stdout_lines
      when: jenkins_status.rc != 0
      
    - name: Ensure Jenkins has proper Java configuration
      lineinfile:
        path: /etc/default/jenkins
        regexp: '^JAVA_HOME='
        line: "JAVA_HOME={{ java_path_result.stdout }}"
        
    - name: Check if Jenkins user exists
      command: id jenkins
      register: jenkins_user_check
      failed_when: false
      changed_when: false
      
    - name: Add Jenkins user to docker group
      user:
        name: jenkins
        groups: docker
        append: yes
      when: jenkins_user_check.rc == 0
      
    - name: Create Jenkins directories with proper permissions
      file:
        path: "{{ item }}"
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'
      loop:
        - /var/lib/jenkins
        - /var/cache/jenkins
        - /var/log/jenkins
      when: jenkins_user_check.rc == 0
      
    - name: Check port 8080 availability
      wait_for:
        port: 8080
        timeout: 1
        state: stopped
      ignore_errors: yes
      
    - name: Kill any process using port 8080
      shell: |
        if lsof -ti:8080; then
          kill -9 $(lsof -ti:8080)
        fi
      ignore_errors: yes
      
    - name: Reset Jenkins service failures
      command: systemctl reset-failed jenkins.service
      failed_when: false
      
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
        
    - name: Start Jenkins with retry
      systemd:
        name: jenkins
        state: started
      retries: 3
      delay: 10
      register: jenkins_start_result
      
    - name: Enable Jenkins service
      systemd:
        name: jenkins
        enabled: yes
      when: jenkins_start_result is succeeded
      
    - name: Check Jenkins logs if startup failed
      command: journalctl -xeu jenkins.service --no-pager -n 50
      register: jenkins_logs
      when: jenkins_start_result is failed
      
    - name: Display Jenkins error logs
      debug:
        var: jenkins_logs.stdout_lines
      when: jenkins_start_result is failed
        
    # Maven Installation
    - name: Check if Maven is already installed
      stat:
        path: "/opt/apache-maven-{{ maven_version }}"
      register: maven_installed
      
    - name: Download Maven
      get_url:
        url: "https://archive.apache.org/dist/maven/maven-3/{{ maven_version }}/binaries/apache-maven-{{ maven_version }}-bin.tar.gz"
        dest: "/tmp/apache-maven-{{ maven_version }}-bin.tar.gz"
        mode: '0644'
      when: not maven_installed.stat.exists
      
    - name: Extract Maven
      unarchive:
        src: "/tmp/apache-maven-{{ maven_version }}-bin.tar.gz"
        dest: /opt
        remote_src: yes
        owner: root
        group: root
      when: not maven_installed.stat.exists
      
    - name: Create Maven symlink
      file:
        src: "/opt/apache-maven-{{ maven_version }}"
        dest: /opt/maven
        state: link
        
    - name: Create Maven environment script
      copy:
        content: |
          export MAVEN_HOME=/opt/maven
          export M2_HOME=/opt/maven
          export PATH=$PATH:$MAVEN_HOME/bin
        dest: /etc/profile.d/maven.sh
        mode: '0644'
        
    # SonarQube Installation
    - name: Create sonarqube user
      user:
        name: sonarqube
        system: yes
        shell: /bin/false
        home: /opt/sonarqube
        create_home: no
        
    - name: Check if SonarQube is already installed
      stat:
        path: "/opt/sonarqube-{{ sonar_version }}"
      register: sonar_installed
      
    - name: Download SonarQube
      get_url:
        url: "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-{{ sonar_version }}.zip"
        dest: "/tmp/sonarqube-{{ sonar_version }}.zip"
        mode: '0644'
      when: not sonar_installed.stat.exists
      
    - name: Extract SonarQube
      unarchive:
        src: "/tmp/sonarqube-{{ sonar_version }}.zip"
        dest: /opt
        remote_src: yes
        owner: sonarqube
        group: sonarqube
      when: not sonar_installed.stat.exists
      
    - name: Create SonarQube symlink
      file:
        src: "/opt/sonarqube-{{ sonar_version }}"
        dest: /opt/sonarqube
        state: link
        owner: sonarqube
        group: sonarqube
        
    - name: Configure SonarQube database connection
      copy:
        content: |
          sonar.jdbc.username=sonar
          sonar.jdbc.password={{ sonar_db_password }}
          sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube
          sonar.web.host=0.0.0.0
          sonar.web.port=9000
        dest: /opt/sonarqube/conf/sonar.properties
        owner: sonarqube
        group: sonarqube
        mode: '0644'
        
    - name: Configure system limits for SonarQube
      blockinfile:
        path: /etc/security/limits.conf
        block: |
          sonarqube   -   nofile   65536
          sonarqube   -   nproc    4096
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SonarQube limits"
        
    - name: Configure kernel parameters for SonarQube
      blockinfile:
        path: /etc/sysctl.conf
        block: |
          vm.max_map_count=524288
          fs.file-max=131072
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SonarQube kernel params"
      notify: reload sysctl
      
    - name: Create SonarQube systemd service
      copy:
        content: |
          [Unit]
          Description=SonarQube service
          After=syslog.target network.target postgresql.service
          
          [Service]
          Type=forking
          ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
          ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop
          User=sonarqube
          Group=sonarqube
          Restart=always
          LimitNOFILE=65536
          LimitNPROC=4096
          
          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/sonarqube.service
        mode: '0644'
      notify: reload systemd
      
    - name: Start and enable SonarQube
      systemd:
        name: sonarqube
        state: started
        enabled: yes
        daemon_reload: yes
        
    # Trivy Installation
    - name: Download Trivy GPG key
      get_url:
        url: https://aquasecurity.github.io/trivy-repo/deb/public.key
        dest: /tmp/trivy.key
        mode: '0644'
        
    - name: Convert and install Trivy GPG key
      shell: gpg --dearmor -o /usr/share/keyrings/trivy-keyring.gpg /tmp/trivy.key
      args:
        creates: /usr/share/keyrings/trivy-keyring.gpg
        
    - name: Get Ubuntu codename for Trivy repo
      command: lsb_release -sc
      register: ubuntu_codename
      changed_when: false
      
    - name: Add Trivy repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/trivy-keyring.gpg] https://aquasecurity.github.io/trivy-repo/deb {{ ubuntu_codename.stdout }} main"
        state: present
        filename: trivy
        
    - name: Update apt cache after adding Trivy repo
      apt:
        update_cache: yes
        
    - name: Install Trivy
      apt:
        name: trivy
        state: present
        
    # Docker post-installation verification and testing
    - name: Test Docker installation
      command: docker --version
      register: docker_version
      changed_when: false
      
    - name: Test Docker service
      command: docker info
      register: docker_info
      changed_when: false
      failed_when: false
      
    - name: Pull hello-world Docker image for testing
      docker_image:
        name: hello-world
        source: pull
      register: docker_pull_test
      failed_when: false
      
    # Firewall Configuration
    - name: Configure UFW firewall rules
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '22'    # SSH
        - '8080'  # Jenkins
        - '9000'  # SonarQube
        - '5432'  # PostgreSQL (if needed for remote access)
        
    - name: Allow SSH from anywhere (ensure we don't get locked out)
      ufw:
        rule: allow
        name: OpenSSH
        
    - name: Check if SSH port 22 is reachable
      wait_for:
        port: 22
        state: started
        timeout: 10
      register: ssh_port_check
      ignore_errors: yes

    - name: Enable UFW firewall
      ufw:
        state: enabled
        policy: deny
        direction: incoming
      when: ssh_port_check is succeeded
        
    # Cleanup
    - name: Clean up downloaded files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/apache-maven-{{ maven_version }}-bin.tar.gz"
        - "/tmp/sonarqube-{{ sonar_version }}.zip"
        - "/tmp/jenkins.key"
        - "/tmp/trivy.key"
        - "/tmp/docker.key"
        
    # Information gathering
    - name: Wait for Jenkins to start
      wait_for:
        port: 8080
        delay: 30
        timeout: 300
        
    - name: Get Jenkins initial admin password
      slurp:
        src: /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_password
      ignore_errors: yes
      
    - name: Restart Jenkins to ensure Docker group membership is active
      systemd:
        name: jenkins
        state: restarted
      when: jenkins_user_check.rc == 0
      
  handlers:
    - name: reload sysctl
      command: sysctl -p
      
    - name: reload systemd
      systemd:
        daemon_reload: yes
        
  post_tasks:
    - name: Display installation summary
      debug:
        msg:
          - "Installation complete!"
          - "Jenkins: http://{{ ansible_default_ipv4.address }}:8080"
          - "SonarQube: http://{{ ansible_default_ipv4.address }}:9000"
          - "Database password: {{ sonar_db_password }}"
          - "Docker version: {{ docker_version.stdout }}"
          - "Jenkins initial password: {{ jenkins_password.content | b64decode | trim if jenkins_password is succeeded else 'Not available yet - check /var/lib/jenkins/secrets/initialAdminPassword' }}"
          - "Jenkins user added to docker group - can run Docker commands"
          - "Note: You may need to restart Jenkins after initial setup to ensure Docker group membership is active"